{"ast":null,"code":"var _loadState;\nimport { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\nconst initialState = {\n  ...(loadState() || {\n    todayCount: 0,\n    weeklyCount: 0,\n    history: {}\n  }),\n  attendedStudents: ((_loadState = loadState()) === null || _loadState === void 0 ? void 0 : _loadState.attendedStudents) || []\n};\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state, action) => {\n      const student = action.payload;\n\n      // 이미 출석한 학생인지 확인\n      if (!state.attendedStudents.includes(student.id)) {\n        // 1:1 수업은 2명, 일반 수업은 1명으로 카운트\n        const increment = student.isOneOnOne ? 2 : 1;\n        state.todayCount = (state.todayCount || 0) + increment;\n        state.weeklyCount = (state.weeklyCount || 0) + increment;\n\n        // 출석한 학생 ID 저장\n        state.attendedStudents.push(student.id);\n        const dateKey = new Date().toISOString().split('T')[0];\n        if (!state.history) state.history = {};\n        state.history[dateKey] = state.todayCount;\n        saveState(state);\n      }\n    },\n    endDay: state => {\n      state.todayCount = 0;\n      state.attendedStudents = []; // 출석 학생 목록 초기화\n      saveState(state);\n    },\n    endWeek: state => {\n      state.todayCount = 0;\n      state.weeklyCount = 0;\n      state.history = {};\n      state.attendedStudents = []; // 출석 학생 목록 초기화\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    }\n  }\n});\nexport const {\n  markAttendance,\n  endDay,\n  endWeek\n} = attendanceSlice.actions;\n\n// 출석 여부 확인을 위한 selector 추가\nexport const selectAttendedStudents = state => state.attendance.attendedStudents;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  return result;\n};\nexport default attendanceSlice.reducer;","map":{"version":3,"names":["createSlice","format","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","saveState","state","stringify","setItem","history","initialState","todayCount","weeklyCount","attendedStudents","_loadState","attendanceSlice","name","reducers","markAttendance","action","student","payload","includes","id","increment","isOneOnOne","push","dateKey","Date","toISOString","split","endDay","endWeek","lastReset","actions","selectAttendedStudents","attendance","weeklyResetMiddleware","store","next","result","getState","now","daysSinceReset","Math","floor","isMonday","getDay","dispatch","reducer"],"sources":["/Users/mk/Photo/블로그/[Coding]blog_Ai/DLAB-Kevin/src/redux/slices/attendanceSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\n\nconst initialState = {\n  ...(loadState() || {\n    todayCount: 0,\n    weeklyCount: 0,\n    history: {},\n  }),\n  attendedStudents: loadState()?.attendedStudents || []\n};\n\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state, action) => {\n      const student = action.payload;\n      \n      // 이미 출석한 학생인지 확인\n      if (!state.attendedStudents.includes(student.id)) {\n        // 1:1 수업은 2명, 일반 수업은 1명으로 카운트\n        const increment = student.isOneOnOne ? 2 : 1;\n        \n        state.todayCount = (state.todayCount || 0) + increment;\n        state.weeklyCount = (state.weeklyCount || 0) + increment;\n        \n        // 출석한 학생 ID 저장\n        state.attendedStudents.push(student.id);\n        \n        const dateKey = new Date().toISOString().split('T')[0];\n        if (!state.history) state.history = {};\n        state.history[dateKey] = state.todayCount;\n        \n        saveState(state);\n      }\n    },\n    endDay: (state) => {\n      state.todayCount = 0;\n      state.attendedStudents = []; // 출석 학생 목록 초기화\n      saveState(state);\n    },\n    endWeek: (state) => {\n      state.todayCount = 0;\n      state.weeklyCount = 0;\n      state.history = {};\n      state.attendedStudents = []; // 출석 학생 목록 초기화\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    },\n  },\n});\n\nexport const { markAttendance, endDay, endWeek } = attendanceSlice.actions;\n\n// 출석 여부 확인을 위한 selector 추가\nexport const selectAttendedStudents = (state) => state.attendance.attendedStudents;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  \n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  \n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    \n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  \n  return result;\n};\n\nexport default attendanceSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}