{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\nconst initialState = loadState() || {\n  todayCount: 0,\n  weeklyCount: 0,\n  history: {}\n};\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: state => {\n      const today = new Date().getDay();\n      const dayMap = {\n        0: '일',\n        1: '월',\n        2: '화',\n        3: '수',\n        4: '목',\n        5: '금',\n        6: '토'\n      };\n      const students = JSON.parse(localStorage.getItem('students') || '[]');\n      const todayStudents = students.filter(student => student.day === dayMap[today]);\n      const oneOnOneCount = todayStudents.filter(student => student.isOneOnOne).length;\n      const regularCount = todayStudents.filter(student => !student.isOneOnOne).length;\n      const totalCount = oneOnOneCount * 2 + regularCount;\n      state.todayCount = (state.todayCount || 0) + totalCount;\n      state.weeklyCount = (state.weeklyCount || 0) + totalCount;\n      const dateKey = new Date().toISOString().split('T')[0];\n      if (!state.history) state.history = {};\n      state.history[dateKey] = state.todayCount;\n      saveState(state);\n    },\n    endDay: state => {\n      state.todayCount = 0;\n      saveState(state);\n    },\n    endWeek: state => {\n      state.todayCount = 0;\n      state.weeklyCount = 0;\n      state.history = {};\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    }\n  }\n});\nexport const {\n  markAttendance,\n  endDay,\n  endWeek\n} = attendanceSlice.actions;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  return result;\n};\nexport default attendanceSlice.reducer;","map":{"version":3,"names":["createSlice","format","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","saveState","state","stringify","setItem","history","initialState","todayCount","weeklyCount","attendanceSlice","name","reducers","markAttendance","today","Date","getDay","dayMap","students","todayStudents","filter","student","day","oneOnOneCount","isOneOnOne","length","regularCount","totalCount","dateKey","toISOString","split","endDay","endWeek","lastReset","actions","weeklyResetMiddleware","store","next","action","result","getState","attendance","now","daysSinceReset","Math","floor","isMonday","dispatch","reducer"],"sources":["/Users/mk/Photo/블로그/[Coding]blog_Ai/DLAB-Kevin/src/redux/slices/attendanceSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\n\nconst initialState = loadState() || {\n  todayCount: 0,\n  weeklyCount: 0,\n  history: {}\n};\n\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state) => {\n      const today = new Date().getDay();\n      const dayMap = {0: '일', 1: '월', 2: '화', 3: '수', 4: '목', 5: '금', 6: '토'};\n      const students = JSON.parse(localStorage.getItem('students') || '[]');\n      const todayStudents = students.filter(student => student.day === dayMap[today]);\n      \n      const oneOnOneCount = todayStudents.filter(student => student.isOneOnOne).length;\n      const regularCount = todayStudents.filter(student => !student.isOneOnOne).length;\n      const totalCount = oneOnOneCount * 2 + regularCount;\n\n      state.todayCount = (state.todayCount || 0) + totalCount;\n      state.weeklyCount = (state.weeklyCount || 0) + totalCount;\n      \n      const dateKey = new Date().toISOString().split('T')[0];\n      if (!state.history) state.history = {};\n      state.history[dateKey] = state.todayCount;\n      \n      saveState(state);\n    },\n    endDay: (state) => {\n      state.todayCount = 0;\n      saveState(state);\n    },\n    endWeek: (state) => {\n      state.todayCount = 0;\n      state.weeklyCount = 0;\n      state.history = {};\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    },\n  },\n});\n\nexport const { markAttendance, endDay, endWeek } = attendanceSlice.actions;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  \n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  \n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    \n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  \n  return result;\n};\n\nexport default attendanceSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}