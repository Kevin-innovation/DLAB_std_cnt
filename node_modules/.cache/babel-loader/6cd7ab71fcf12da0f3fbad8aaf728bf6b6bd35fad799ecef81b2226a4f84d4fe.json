{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\nconst initialState = loadState() || {\n  todayCount: 0,\n  weeklyCount: 0,\n  history: {}\n};\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state, action) => {\n      // action.payload로 학생 정보를 받음\n      const student = action.payload;\n\n      // 1:1 수업은 2명, 일반 수업은 1명으로 카운트\n      const increment = student.isOneOnOne ? 2 : 1;\n      state.todayCount = (state.todayCount || 0) + increment;\n      state.weeklyCount = (state.weeklyCount || 0) + increment;\n      const dateKey = new Date().toISOString().split('T')[0];\n      if (!state.history) state.history = {};\n      state.history[dateKey] = state.todayCount;\n      saveState(state);\n    },\n    endDay: state => {\n      state.todayCount = 0;\n      saveState(state);\n    },\n    endWeek: state => {\n      state.todayCount = 0;\n      state.weeklyCount = 0;\n      state.history = {};\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    }\n  }\n});\nexport const {\n  markAttendance,\n  endDay,\n  endWeek\n} = attendanceSlice.actions;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  return result;\n};\nexport default attendanceSlice.reducer;","map":{"version":3,"names":["createSlice","format","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","saveState","state","stringify","setItem","history","initialState","todayCount","weeklyCount","attendanceSlice","name","reducers","markAttendance","action","student","payload","increment","isOneOnOne","dateKey","Date","toISOString","split","endDay","endWeek","lastReset","actions","weeklyResetMiddleware","store","next","result","getState","attendance","now","daysSinceReset","Math","floor","isMonday","getDay","dispatch","reducer"],"sources":["/Users/mk/Photo/블로그/[Coding]blog_Ai/DLAB-Kevin/src/redux/slices/attendanceSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\n\nconst initialState = loadState() || {\n  todayCount: 0,\n  weeklyCount: 0,\n  history: {}\n};\n\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state, action) => {\n      // action.payload로 학생 정보를 받음\n      const student = action.payload;\n      \n      // 1:1 수업은 2명, 일반 수업은 1명으로 카운트\n      const increment = student.isOneOnOne ? 2 : 1;\n      \n      state.todayCount = (state.todayCount || 0) + increment;\n      state.weeklyCount = (state.weeklyCount || 0) + increment;\n      \n      const dateKey = new Date().toISOString().split('T')[0];\n      if (!state.history) state.history = {};\n      state.history[dateKey] = state.todayCount;\n      \n      saveState(state);\n    },\n    endDay: (state) => {\n      state.todayCount = 0;\n      saveState(state);\n    },\n    endWeek: (state) => {\n      state.todayCount = 0;\n      state.weeklyCount = 0;\n      state.history = {};\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    },\n  },\n});\n\nexport const { markAttendance, endDay, endWeek } = attendanceSlice.actions;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  \n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  \n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    \n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  \n  return result;\n};\n\nexport default attendanceSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}