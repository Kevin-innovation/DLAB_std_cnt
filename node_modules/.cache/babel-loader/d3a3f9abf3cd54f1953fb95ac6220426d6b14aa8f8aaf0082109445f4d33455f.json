{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\nconst defaultState = {\n  todayCount: 0,\n  history: {},\n  attendedStudents: [],\n  weeklyAttendance: {\n    '월': 0,\n    '화': 0,\n    '수': 0,\n    '목': 0,\n    '금': 0,\n    '토': 0\n  }\n};\nconst initialState = {\n  ...defaultState,\n  ...(loadState() || {}),\n  weeklyAttendance: (loadState() || {}).weeklyAttendance || defaultState.weeklyAttendance,\n  attendedStudents: (loadState() || {}).attendedStudents || []\n};\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state, action) => {\n      const student = action.payload;\n      if (!state.attendedStudents.includes(student.id)) {\n        const increment = student.isOneOnOne ? 2 : 1;\n        state.todayCount = (state.todayCount || 0) + increment;\n        state.attendedStudents.push(student.id);\n        const today = new Date().getDay();\n        const days = ['일', '월', '화', '수', '목', '금', '토'];\n        const dayName = days[today];\n        if (!state.weeklyAttendance) {\n          state.weeklyAttendance = defaultState.weeklyAttendance;\n        }\n        state.weeklyAttendance[dayName] = (state.weeklyAttendance[dayName] || 0) + increment;\n        saveState(state);\n      }\n    },\n    endDay: state => {\n      state.todayCount = 0;\n      state.attendedStudents = [];\n      saveState(state);\n    },\n    endWeek: state => {\n      state.todayCount = 0;\n      state.history = {};\n      state.attendedStudents = [];\n      state.weeklyAttendance = defaultState.weeklyAttendance;\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    }\n  }\n});\nexport const selectTodayCount = state => state.attendance.todayCount || 0;\nexport const selectWeeklyAttendance = state => state.attendance.weeklyAttendance || defaultState.weeklyAttendance;\nexport const selectWeeklyCount = state => {\n  const weeklyAttendance = state.attendance.weeklyAttendance || defaultState.weeklyAttendance;\n  return Object.values(weeklyAttendance).reduce((sum, count) => sum + count, 0);\n};\nexport const selectAttendedStudents = state => state.attendance.attendedStudents || [];\nexport const {\n  markAttendance,\n  endDay,\n  endWeek\n} = attendanceSlice.actions;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  return result;\n};\nexport default attendanceSlice.reducer;","map":{"version":3,"names":["createSlice","format","loadState","serializedState","localStorage","getItem","undefined","JSON","parse","err","saveState","state","stringify","setItem","history","defaultState","todayCount","attendedStudents","weeklyAttendance","initialState","attendanceSlice","name","reducers","markAttendance","action","student","payload","includes","id","increment","isOneOnOne","push","today","Date","getDay","days","dayName","endDay","endWeek","lastReset","toISOString","selectTodayCount","attendance","selectWeeklyAttendance","selectWeeklyCount","Object","values","reduce","sum","count","selectAttendedStudents","actions","weeklyResetMiddleware","store","next","result","getState","now","daysSinceReset","Math","floor","isMonday","dispatch","reducer"],"sources":["/Users/mk/Photo/블로그/[Coding]blog_Ai/DLAB-Kevin/src/redux/slices/attendanceSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { format } from 'date-fns';\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('attendanceState');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('attendanceState', serializedState);\n    // 출석 기록 히스토리 저장\n    localStorage.setItem('attendanceHistory', JSON.stringify(state.history));\n  } catch (err) {\n    // Ignore write errors\n  }\n};\n\nconst defaultState = {\n  todayCount: 0,\n  history: {},\n  attendedStudents: [],\n  weeklyAttendance: {\n    '월': 0,\n    '화': 0,\n    '수': 0,\n    '목': 0,\n    '금': 0,\n    '토': 0,\n  }\n};\n\nconst initialState = {\n  ...defaultState,\n  ...(loadState() || {}),\n  weeklyAttendance: (loadState() || {}).weeklyAttendance || defaultState.weeklyAttendance,\n  attendedStudents: (loadState() || {}).attendedStudents || []\n};\n\nconst attendanceSlice = createSlice({\n  name: 'attendance',\n  initialState,\n  reducers: {\n    markAttendance: (state, action) => {\n      const student = action.payload;\n      \n      if (!state.attendedStudents.includes(student.id)) {\n        const increment = student.isOneOnOne ? 2 : 1;\n        \n        state.todayCount = (state.todayCount || 0) + increment;\n        state.attendedStudents.push(student.id);\n        \n        const today = new Date().getDay();\n        const days = ['일', '월', '화', '수', '목', '금', '토'];\n        const dayName = days[today];\n        \n        if (!state.weeklyAttendance) {\n          state.weeklyAttendance = defaultState.weeklyAttendance;\n        }\n        \n        state.weeklyAttendance[dayName] = (state.weeklyAttendance[dayName] || 0) + increment;\n        \n        saveState(state);\n      }\n    },\n    endDay: (state) => {\n      state.todayCount = 0;\n      state.attendedStudents = [];\n      saveState(state);\n    },\n    endWeek: (state) => {\n      state.todayCount = 0;\n      state.history = {};\n      state.attendedStudents = [];\n      state.weeklyAttendance = defaultState.weeklyAttendance;\n      state.lastReset = new Date().toISOString();\n      saveState(state);\n    },\n  },\n});\n\nexport const selectTodayCount = state => state.attendance.todayCount || 0;\nexport const selectWeeklyAttendance = state => state.attendance.weeklyAttendance || defaultState.weeklyAttendance;\nexport const selectWeeklyCount = state => {\n  const weeklyAttendance = state.attendance.weeklyAttendance || defaultState.weeklyAttendance;\n  return Object.values(weeklyAttendance).reduce((sum, count) => sum + count, 0);\n};\nexport const selectAttendedStudents = state => state.attendance.attendedStudents || [];\n\nexport const { markAttendance, endDay, endWeek } = attendanceSlice.actions;\n\n// 미들웨어: 매주 월요일 자동 초기화\nexport const weeklyResetMiddleware = store => next => action => {\n  const result = next(action);\n  \n  const state = store.getState();\n  const lastReset = state.attendance.lastReset ? new Date(state.attendance.lastReset) : null;\n  const now = new Date();\n  \n  if (lastReset) {\n    const daysSinceReset = Math.floor((now - lastReset) / (1000 * 60 * 60 * 24));\n    const isMonday = now.getDay() === 1;\n    \n    if (daysSinceReset >= 7 && isMonday) {\n      store.dispatch(endWeek());\n    }\n  }\n  \n  return result;\n};\n\nexport default attendanceSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}